"""empty message

Revision ID: 1625736539894
Revises: 1622391676043
Create Date: 2021-07-08 16:29:01.528147

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '1625736539894'
down_revision = '1622391676043'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('log')
    op.drop_table('user_workload')
    op.drop_table('user-weekly-review')
    op.drop_table('ac')
    op.drop_table('task')
    op.drop_table('backlog')
    op.drop_table('epic')
    op.drop_table('iteration')
    op.drop_table('theme')
    op.drop_table('user_project')
    op.drop_table('project')
    op.add_column('user', sa.Column('username', sa.String(length=500), nullable=False))
    op.add_column('user', sa.Column('password', sa.String(length=500), nullable=False))
    op.add_column('user', sa.Column('job_title', sa.String(length=500), nullable=False))
    op.add_column('user', sa.Column('address', sa.String(length=500), nullable=False))
    op.add_column('user', sa.Column('avatar', sa.String(length=500), nullable=False))
    op.drop_constraint('user_facebook_url_key', 'user', type_='unique')
    op.drop_column('user', 'phone')
    op.drop_column('user', 'name')
    op.drop_column('user', 'facebook_url')
    op.drop_column('user', 'email')
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('user', sa.Column('email', sa.VARCHAR(), autoincrement=False, nullable=False))
    op.add_column('user', sa.Column('facebook_url', sa.VARCHAR(), autoincrement=False, nullable=False))
    op.add_column('user', sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False))
    op.add_column('user', sa.Column('phone', sa.VARCHAR(length=15), autoincrement=False, nullable=False))
    op.create_unique_constraint('user_facebook_url_key', 'user', ['facebook_url'])
    op.drop_column('user', 'avatar')
    op.drop_column('user', 'address')
    op.drop_column('user', 'job_title')
    op.drop_column('user', 'password')
    op.drop_column('user', 'username')
    op.create_table('project',
    sa.Column('id', postgresql.UUID(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('goal', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('description', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('estimated_hours', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('deleted_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='project_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('user_project',
    sa.Column('id', postgresql.UUID(), autoincrement=False, nullable=True),
    sa.Column('user_id', postgresql.UUID(), autoincrement=False, nullable=False),
    sa.Column('project_id', postgresql.UUID(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['project_id'], ['project.id'], name='user_project_project_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], name='user_project_user_id_fkey'),
    sa.PrimaryKeyConstraint('user_id', 'project_id', name='user_project_pkey')
    )
    op.create_table('theme',
    sa.Column('id', postgresql.UUID(), autoincrement=False, nullable=False),
    sa.Column('project_id', postgresql.UUID(), autoincrement=False, nullable=True),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('description', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('deleted_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['project_id'], ['project.id'], name='theme_project_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='theme_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('iteration',
    sa.Column('id', postgresql.UUID(), autoincrement=False, nullable=False),
    sa.Column('project_id', postgresql.UUID(), autoincrement=False, nullable=True),
    sa.Column('start_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('end_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('goal', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('description', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('velocity', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('point', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('estimated_hours', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('logged_hours', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('deleted_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['project_id'], ['project.id'], name='iteration_project_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='iteration_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('epic',
    sa.Column('id', postgresql.UUID(), autoincrement=False, nullable=False),
    sa.Column('project_id', postgresql.UUID(), autoincrement=False, nullable=True),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('description', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('deleted_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['project_id'], ['project.id'], name='epic_project_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='epic_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('backlog',
    sa.Column('id', postgresql.UUID(), autoincrement=False, nullable=False),
    sa.Column('theme_id', postgresql.UUID(), autoincrement=False, nullable=True),
    sa.Column('epic_id', postgresql.UUID(), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('progress', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('goal', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('description', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('point', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('deleted_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('iteration_id', postgresql.UUID(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['epic_id'], ['epic.id'], name='backlog_epic_id_fkey'),
    sa.ForeignKeyConstraint(['iteration_id'], ['iteration.id'], name='backlog_iteration_id_fkey'),
    sa.ForeignKeyConstraint(['theme_id'], ['theme.id'], name='backlog_theme_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='backlog_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('task',
    sa.Column('id', postgresql.UUID(), autoincrement=False, nullable=False),
    sa.Column('backlog_id', postgresql.UUID(), autoincrement=False, nullable=True),
    sa.Column('iteration_id', postgresql.UUID(), autoincrement=False, nullable=False),
    sa.Column('type', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('estimated_hours', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('deleted_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['backlog_id'], ['backlog.id'], name='task_backlog_id_fkey'),
    sa.ForeignKeyConstraint(['iteration_id'], ['iteration.id'], name='task_iteration_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='task_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('ac',
    sa.Column('id', postgresql.UUID(), autoincrement=False, nullable=False),
    sa.Column('backlog_id', postgresql.UUID(), autoincrement=False, nullable=True),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('description', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('deleted_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['backlog_id'], ['backlog.id'], name='ac_backlog_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='ac_pkey')
    )
    op.create_table('user-weekly-review',
    sa.Column('id', postgresql.UUID(), autoincrement=False, nullable=False),
    sa.Column('user_id', postgresql.UUID(), autoincrement=False, nullable=True),
    sa.Column('review', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('start_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('deleted_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], name='user-weekly-review_user_id_fkey', deferrable=True),
    sa.PrimaryKeyConstraint('id', name='user-weekly-review_pkey')
    )
    op.create_table('user_workload',
    sa.Column('id', postgresql.UUID(), autoincrement=False, nullable=False),
    sa.Column('user_id', postgresql.UUID(), autoincrement=False, nullable=True),
    sa.Column('iteration_id', postgresql.UUID(), autoincrement=False, nullable=True),
    sa.Column('wordload', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('deleted_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['iteration_id'], ['iteration.id'], name='user_workload_iteration_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], name='user_workload_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='user_workload_pkey')
    )
    op.create_table('log',
    sa.Column('id', postgresql.UUID(), autoincrement=False, nullable=False),
    sa.Column('task_id', postgresql.UUID(), autoincrement=False, nullable=True),
    sa.Column('logged_hours', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('logged_date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('logged_content', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('deleted_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['task_id'], ['task.id'], name='log_task_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='log_pkey')
    )
    # ### end Alembic commands ###
